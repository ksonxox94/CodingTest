#include<iostream>
#include<vector>
using namespace std;
int dy[5] = { 0,-1,1,0,0 }; //X 위 아래 왼 오
int dx[5] = { 0,0,0,-1,1 };
struct pos
{
    int smell;
    int shark_num;
};
struct shark
{
    int y;
    int x;
    int num;
    int dir;
};
int countShark(vector<shark> sharkList)
{
    int cnt = 0;
    for (int i = 1; i < sharkList.size(); ++i)
    {
        if (sharkList[i].num > 0)
        {
            ++cnt;
        }
    }
    return cnt;
}
int main()
{
    int n;
    int m;
    int k;
    cin >> n >> m >> k;
    vector<vector<pos>> map(n, vector<pos>(n, { 0,0 })); //상어번호와 냄새를 표시하는 맵
    vector<shark> sharkList(m + 1, { 0,0,0,0 });//상어 목록(좌표,번호,방향을 가짐)
    vector<vector<int>> priDir(m * 4, vector<int>(4, 0));//각 상어의 방향 별 우선순위를 저장하는 2차원 벡터
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            cin >> map[i][j].shark_num;
            if (map[i][j].shark_num > 0) //상어가 존재하면
            {
                map[i][j].smell = k; //좌표에 냄새 뿌리고
                sharkList[map[i][j].shark_num].y = i; //상어의 좌표와 번호 설정(인덱스=상어번호)
                sharkList[map[i][j].shark_num].x = j;
                sharkList[map[i][j].shark_num].num = map[i][j].shark_num;
            }
        }
    }
    for (int i = 1; i <= m; ++i)
    {
        cin >> sharkList[i].dir; //상어들의 초기 방향 설정
    }
    for (int i = 0; i < m * 4; ++i)//각 ㅅ강어의 방향 별 우선순위 설정
    {
        for (int j = 0; j < 4; ++j)
        {
            cin >> priDir[i][j];
        }
    }
    int t = 0;
    while (true)
    {
        for (int i = m; i > 0; --i) //높은 번호부터 상어를 이동시키면 최종적으로 작은 번호가 높은 번호가 동일한 t에서 차지한 좌표를 차지할 수 있음
        {
            if (sharkList[i].num > 0)//상어가 존재할 때만 탐색
            {
                bool move = false;
                int idx = (i - 1) * 4 + sharkList[i].dir - 1; //(1~m)번 상어가 (1~4)방향일 때 우선순위 리스트 인덱스
           /*
           m=2라고 가정 시 i=2면 idx=4+4-1=7     sharkList[2].dir=4(오른쪽)이라고 가정
           0 : 2 3 1 4 첫번째 상어 위쪽 일때 우선순위
           1 : 4 1 2 3
           2 : 3 4 2 1
           3 : 4 3 1 2 첫번째 상어 오른쪽 일때 우선순위
           4 : 2 4 3 1 두번째 상어 위 일때 우선순위
           5 : 2 1 3 4
           6 : 3 4 1 2
           7 : 4 1 2 3 두번째 상어 오른쪽일때 우선순위
           */
                int dir, newY, newX = 0;
                for (int j = 0; j < 4; ++j)//냄새가 0인 곳 탐색하는 부분
                {
                    dir = priDir[idx][j]; //우선순위 대로 상하좌우 탐색
                    newY = sharkList[i].y + dy[dir];
                    newX = sharkList[i].x + dx[dir];
                    if (0 <= newY && newY < n && 0 <= newX && newX < n)//범위 안이고
                    {
                        if (map[newY][newX].smell == 0)//냄새가 0이면
                        {
                            move = true;//이동 체크
                        }
                        if (map[newY][newX].smell == k + 1)//탐색한 맵의 좌표 냄새가 k+1이면 높은 번호의 상어의 이동과 겹친 것
                        {
                            move = true;
                            sharkList[map[newY][newX].shark_num].num = 0; //높은 번호 상어를 쫓아냄
                        }
                        if (move == true) //상어 이동 처리
                        {
                            map[newY][newX].shark_num = sharkList[i].num; //좌표에 상어 번호와 냄새 새로 뿌리고
                            map[newY][newX].smell = k + 1;
                            sharkList[i].y = newY; //상어 리스트에서 상어의 좌표와 방향을 새로 업데이트
                            sharkList[i].x = newX;
                            sharkList[i].dir = dir;
                            break; //이동했으므로 탐색 종료
                        }
                    }
                }
                if (move == false)//냄새가 0인 곳이 없어서 자기 냄새를 탐색하는 부분
                {
                    for (int j = 0; j < 4; ++j)
                    {
                        dir = priDir[idx][j];//우선순위 대로 상하좌우 탐색
                        newY = sharkList[i].y + dy[dir];
                        newX = sharkList[i].x + dx[dir];
                        if (0 <= newY && newY < n && 0 <= newX && newX < n)//범위 안이고
                        {
                            if (map[newY][newX].shark_num == sharkList[i].num)//좌표의 냄새가 자기 냄새와 같으면
                            {
                                map[newY][newX].smell = k + 2; //맵에 냄새를 k+2로 처리(냄새가 0인 곳 탐색했을 때랑 구분하기 위해)
                                sharkList[i].y = newY; //상어 리스트에서 상어의 좌표와 방향을 새로 업데이트
                                sharkList[i].x = newX;
                                sharkList[i].dir = dir;
                                break; //이동했으므로 탐색 종료
                            }
                        }
                    }
                }
            }
        }
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (0 < map[i][j].smell)
                {
                    --map[i][j].smell; //1초간 이동 했으므로 냄새를 다 1씩 빼줌
                    if (map[i][j].smell == k + 1) //자기 냄새를 찾아 상어가 새로 이동한 경우는 1 더 빼줌(k+2로 세팅했으므로)
                        --map[i][j].smell;
                }
                if (map[i][j].smell == 0)//냄새가 0이 되면 해당 좌표에 상어 번호도 0이 됨
                {
                    map[i][j].shark_num = 0;
                }
            }
        }
        ++t; 
        if (countShark(sharkList) == 1) //t초후 상어가 1개만 존재하면 t를 출력하고 종료
        {
            cout << t;
            break;
        }
        else if (t >= 1000)//t가 1000초인데도 상어가 2개 이상 존재하면 -1을 출력하고 종료
        {
            cout << -1;
            break;
        }
    }
    return 0;
}
