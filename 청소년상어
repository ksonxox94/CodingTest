#include<iostream>
#include<vector>
using namespace std;
int maxr = 0;
int dy[9] = {0,-1,-1,0,1,1,1,0,-1};//X ↑, ↖, ←, ↙, ↓, ↘, →, ↗ 
int dx[9] = {0,0,-1,-1,-1,0,1,1,1};
struct pos
{
	int num; //물고기 번호 (0이면 물고기 없음, 1~16이면 물고기 있음)
	int dir; //방향
	bool shark; //상어 여부 (false면 상어 아님, true면 상어)
};
void func(vector<vector<pos>> map,int total,int sy,int sx)
{
	total = total + map[sy][sx].num; //먹은 물고기 번호의 합
	if (total > maxr) //최대합보다 크면 갱신
	{
		maxr = total;
	}
	map[sy][sx].num = 0; //상어가 먹었으므로 물고기 없어짐
	map[sy][sx].shark = true;//상어가 물고기 먹은 위치이므로 상어 여부 true
	for(int n=1;n<=16;++n) //작은 물고기부터 모든 물고기를 맵에서 이동시킴
	{
		int nowY;
		int nowX;
		bool flag=false;
		for (int ii = 0; ii < 4; ++ii)
		{
			for (int jj = 0; jj < 4; ++jj)
			{
				if (map[ii][jj].num == n)//해당 번호의 물고기가 맵에 있으면
				{
					nowY = ii; //이동시킬 대상으로 지정
					nowX = jj;
					flag = true;
				}
				if (flag == true)//물고기 찾으면 탐색 종료
					break;
			}
			if (flag == true)
				break;
		}
		if (flag==true)//해당 번호의 물고기가 맵에 있으면
		{
			for (int i = 0; i < 8; ++i)//이동시킬 수 있을 때까지 회전함
			{
				int newY = nowY + dy[map[nowY][nowX].dir];
				int newX = nowX + dx[map[nowY][nowX].dir];
				if (0 <= newY && newY < 4 && 0 <= newX && newX < 4 && map[newY][newX].shark == false)
				{
					int temp = map[nowY][nowX].num;//물고기 번호를 스왑
					map[nowY][nowX].num = map[newY][newX].num;
					map[newY][newX].num = temp;
					
					temp = map[nowY][nowX].dir;//물고기 방향을 스왑
					map[nowY][nowX].dir = map[newY][newX].dir;
					map[newY][newX].dir = temp;
					break;//이동시켰으면 다음 물고기 이동시킴
				}
				if (map[nowY][nowX].dir == 8)
				{
					map[nowY][nowX].dir = 1;
				}
				else
				{
					++map[nowY][nowX].dir;
				}
			}
		}
	}
	int newSY = sy;
	int newSX = sx;
	while(true) //상어가 먹을 물고기가 없을 때까지 탐색
	{
		newSY = newSY + dy[map[sy][sx].dir];//상어의 방향에 있는 물고기만 먹을 수 있으므로
		newSX = newSX + dx[map[sy][sx].dir];
		if (newSX < 0 || newSX > 3 || newSY < 0 || newSY >3)//범위 벗어나면 탐색 종료
			break;
		if (map[newSY][newSX].num > 0)//물고기가 있을 때만 상어가 물고기를 먹고 이동
		{
			map[sy][sx].shark = false;//상어가 새로운 좌표로 이동했으므로 기존 좌표의 상어 여부는 false
			func(map, total, newSY, newSX);//상어가 물고기 먹으러 이동한 좌표에서 다시 탐색 시작
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	vector<vector<pos>> map(4, vector<pos>(4, {0,0,false })); //물고기 번호, 방향, 상어 여부를 표시하는 4X4 맵 
	for (int i = 0; i < 4; ++i)
	{
		for (int j = 0; j < 4; ++j)
		{
			cin >> map[i][j].num >> map[i][j].dir;
		}
	}
	func(map,0,0,0); //상어의 위치를 시작으로 완전탐색하는 재귀함수
	cout << maxr;
}
