#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

bool compare(pair<int, int> a, pair<int, int> b) {
	return a.second < b.second;
}

int solution(vector<int> food_times, long long k) {
	long long total = 0;
	for (int i = 0; i < food_times.size(); ++i) {
		total += food_times[i];
	}
	if (total <= k) return -1;

	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	for (int i = 0; i < food_times.size(); ++i) {
		pq.push(make_pair(food_times[i], i + 1));
	}
	total = 0;
	long long pre = 0;
	long long length = food_times.size();

	while (total + ((pq.top().first - pre) * length) <= k)
	{
		int now = pq.top().first;
		pq.pop();
		total = total + (now - pre) * length;
		--length;
		pre = now;
	}

	vector<pair<int, int> > result;
	while (!pq.empty())
	{
		int food_time = pq.top().first;
		int num = pq.top().second;
		pq.pop();
		result.push_back({ food_time, num });
	}
	sort(result.begin(), result.end(), compare);
	return result[(k - total) % length].second;
}
