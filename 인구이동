#include<iostream>
#include<vector>
#include<queue>
using namespace std;
struct pos
{
	int y;
	int x;
};
bool chkVector(vector<pair<int, int>> v, int y, int x)
{
	for (int i = 0; i < v.size(); ++i)
	{
		if (v[i].first == y && v[i].second == x)
		{
			return false;
		}
	}
	return true;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int map[50][50];
	int dy[4] = { -1,0,1,0 };//북동남서
	int dx[4] = { 0,1,0,-1 };
	int n;
	int l;
	int r;
	cin >> n >> l >> r;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			cin >> map[i][j];
		}
	}
	bool chk = true;
	int cnt = 0;
	while (chk != false)
	{
		chk = false;
		vector<pair<int, int>> av;
		for (int i = 0; i < n; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				if (chkVector(av, i, j))
				{
					queue<pair<int, int>> q;
					pos p;
					p.y = i;
					p.x = j;
					vector<pair<pos, int>> uv;
					uv.push_back(make_pair(p, map[p.y][p.x]));
					av.push_back(make_pair(p.y, p.x));
					q.push(make_pair(p.y, p.x));
					while (!q.empty())
					{
						int y = q.front().first;
						int x = q.front().second;
						q.pop();
						for (int d = 0; d < 4; ++d)
						{
							pos np;
							np.y = y + dy[d];
							np.x = x + dx[d];
							if (0 <= np.y && np.y < n && 0 <= np.x && np.x < n && chkVector(av, np.y, np.x))
							{
								int diff = abs(map[y][x] - map[np.y][np.x]);
								if (l <= diff && diff <= r)
								{
									av.push_back(make_pair(np.y, np.x));
									uv.push_back(make_pair(np, map[np.y][np.x]));
									q.push(make_pair(np.y, np.x));
								}
							}
						}
					}
					if (uv.size() > 1)
					{
						chk = true;
						int sum = 0;
						for (int i = 0; i < uv.size(); ++i)
						{
							sum = sum + uv[i].second;
						}
						int avg = sum / uv.size();
						for (int i = 0; i < uv.size(); ++i)
						{
							int yy = uv[i].first.y;
							int xx = uv[i].first.x;
							map[yy][xx] = avg;
						}
					}
					else
					{
						uv.pop_back();
						av.pop_back();
					}
				}
			}
		}
		if (chk == true)
			cnt++;
	}
	cout << cnt;
}
