/*
https://programmers.co.kr/learn/courses/30/lessons/60063
*/
#include <string>
#include <vector>
#include<iostream>
#include<algorithm>
#include <queue>
using namespace std;
int visit[101][101][2]; //행 열 가로or세로
/*
좌표 0,0 기준으로 로봇의 cur.x가 0이고 cur.y가 0이고
type이 0이면 좌표 [0][0],[0][1]에 [로][봇]
type이 1이면 좌표 [0][0],[1][0] 기준으로
[로]
[봇]이 됨..
visit 배열에서 각각의 좌표는 로봇이 가로로 방문한 적 있는가, 세로로 방문한 적 있는가 저장
★cur.y cur.x는 항상 로봇이
가로로 있을 때 :왼쪽
세로로 있을 때 :윗쪽
*/
int dx[] = { 1, 0, -1, 0 };
int dy[] = { 0, 1, 0, -1 };
struct robot {
	int time;
	int y;
	int x;
	int type; // 0 : 가로, 1 : 세로
};
bool check(vector<vector<int> > board, int x, int y, int type) { // board밖으로 나가거나, 벽에 부딪히면 false
	int N = board.size();
	if (type == 0) {//가로일때
		if (x < 0 || y < 0 || x >= N || y + 1 >= N) return false; //맵 밖
		if (board[x][y] || board[x][y + 1]) return false; //벽
	}
	else {//세로일때
		if (x < 0 || y < 0 || x + 1 >= N || y >= N) return false; //맵 밖
		if (board[x][y] || board[x + 1][y]) return false; //벽
	}
	return true;
}

int solution(vector<vector<int>> board) {
	int answer = 0;
	int N = board.size();
	queue<robot> q;
	q.push({ 0, 0, 0, 0 });
	while (!q.empty())
	{
		robot cur = q.front(); q.pop();
		//현재 로봇이 가로이고 행이 n-1이고 열이 n-2 <또는> 현재 로봇이 세로이고 행이 n-2고 열이 n-1이면 시간값 반환
		if ((cur.type == 0 && cur.y == N - 1 && cur.x == N - 2) || (cur.type == 1 && cur.y == N - 2 && cur.x == N - 1)) {
			return cur.time;
		}

		for (int i = 0; i < 4; i++)
		{ // 단순이동
			int nx = cur.y + dx[i];
			int ny = cur.x + dy[i];
			if (!check(board, nx, ny, cur.type) || visit[nx][ny][cur.type]) continue;
			visit[nx][ny][cur.type] = 1;
			q.push({ cur.time + 1, nx, ny, cur.type });
		}

		//여기부터 회전
		if (cur.type == 0) { //가로에서 회전 ([로][봇]인 상태)

			//[봇]이 축일때 반시계 방향 방향
			if (cur.y + 1 <= N - 1 //반시계 방향으로 돌렸을 때 맵 안이고 
				&&
				!board[cur.y + 1][cur.x]  //회전 궤도에 벽이 없고
				&&
				!board[cur.y + 1][cur.x + 1] //회전했을 때 로봇의 위치가 벽이 아니고
				&&
				!visit[cur.y][cur.x + 1][1] //visit[y][x] 기준 세로일때를 방문한게 아니면
				) {
				q.push({ cur.time + 1, cur.y, cur.x + 1, 1 }); //가로 [로][봇]기준 [봇]을 축으로 반시계방향으로 회전
			}

			//[봇]이 축일때 시계 방향 회전
			if (cur.y - 1 >= 0  //시계 방향으로 돌렸을 때 맵 안이고
				&&
				!board[cur.y - 1][cur.x] //회전 궤도에 벽이 없고
				&&
				!board[cur.y - 1][cur.x + 1] //회전했을 때 로봇의 위치가 벽이 아니고
				&&
				!visit[cur.y - 1][cur.x + 1][1]) {//visit[y-1[x+1] 기준 세로일때를 방문한게 아니면 
				q.push({ cur.time + 1, cur.y - 1, cur.x + 1, 1 }); //가로 [로][봇]기준 [봇]을 축으로 시계방향으로 회전
			}

			//[로]이 축일때 시계 방향 회전
			if (cur.y + 1 <= N - 1 //맵 안이고 
				&&
				!board[cur.y + 1][cur.x + 1] //회전 궤도에 벽이 없고
				&&
				!board[cur.y + 1][cur.x] //회전했을 때 로봇의 위치가 벽이 아니고
				&&
				!visit[cur.y][cur.x][1]) { //visit[y][x]기준 세로일 때를 방문한게 아니면
				q.push({ cur.time + 1, cur.y, cur.x, 1 }); //가로 [로][봇]기준 [로]를 축으로 시계 방향 회전
			}

			//[로]가 축일때 반시계 방향 회전
			if (cur.y - 1 >= 0 //맵 안이고 
				&&
				!board[cur.y - 1][cur.x + 1] //회전 궤도에 벽이 없고 
				&&
				!board[cur.y - 1][cur.x] //회전했을 때 로봇의 위치가 벽이 아니고
				&&
				!visit[cur.y - 1][cur.x][1]) { //visit[y-1][x]기준 세로일 때를 방문한게 아니면 
				q.push({ cur.time + 1, cur.y - 1, cur.x, 1 }); //가로 [로][봇]을 기준 [로]를 축으로 반시계 방향 회전
			}
		}
		else { //세로로 [로]
			   //       [봇] 일 때 

			//[봇]을 기준으로 반시계 방향 회전
			if (cur.x - 1 >= 0 //맵 안이고
				&&
				!board[cur.y][cur.x - 1] //회전 궤도에 벽이 없고
				&&
				!board[cur.y + 1][cur.x - 1] //회전했을 때 로봇의 위치가 벽이 아니고
				&&
				!visit[cur.y + 1][cur.x - 1][0]) {//visit[y+1][x-1]기준 가로일때를 방문한게 아니면 
				q.push({ cur.time + 1, cur.y + 1, cur.x - 1, 0 }); //세로 [로]
																   //     [봇]을 기준 [봇]을 축으로 반시계 방향 회전
			}

			//[봇]을 기준으로 시계 방향 회전
			if (cur.x + 1 <= N - 1 //맵 안이고 
				&&
				!board[cur.y][cur.x + 1] //회전 궤도에 벽이 없고
				&&
				!board[cur.y + 1][cur.x + 1] //회전했을 때 로봇의 위치가 벽이 아니고
				&&
				!visit[cur.y + 1][cur.x][0]) {//visit[y+1][x]기준 가로일때를 방문한게 아니면 
				q.push({ cur.time + 1, cur.y + 1, cur.x, 0 });//세로 [로]
															  //     [봇]을 기준 [봇]을 축으로 시계 방향 회전
			}

			//[로]를 기준으로 시계 방향 회전
			if (cur.x - 1 >= 0 //맵 안이고
				&&
				!board[cur.y + 1][cur.x - 1] //회전 궤도에 벽이 없고 
				&&
				!board[cur.y][cur.x - 1]  //회전했을 때 로봇의 위치가 벽이 아니고
				&&
				!visit[cur.y][cur.x - 1][0]) {//visit[y][x-1]기준 가로일때를 방문한게 아니면 
				q.push({ cur.time + 1, cur.y, cur.x - 1, 0 });//세로 [로]
															  //     [봇]을 기준 [로]을 축으로 시계 방향 회전
			}

			//[로]를 기준으로 반시계 방향 회전
			if (cur.x + 1 <= N - 1
				&&
				!board[cur.y + 1][cur.x + 1]
				&&
				!board[cur.y][cur.x + 1]
				&&
				!visit[cur.y][cur.x][0]) { //visit[y][x]기준 가로일때를 방문한게 아니면
				q.push({ cur.time + 1, cur.y, cur.x, 0 }); //세로 [로]
														   //     [봇]을 기준 [로]을 축으로 반시계 방향 회전
			}
		}
	}
}
