#include <string>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <iostream>
using namespace std;
vector<int> nums;
bool chksosu(int num)
{
	if (num < 2)//0,1은 소수가 아니다
		return 0;
	else
	{
		for (int i = 2; i <= sqrt(num); ++i) //n을 2부터 n제곱근까지 나눴을 때 한번이라도 나눠지면 소수가 아님
		{
			if (num%i == 0)
				return 0;
		}
		return 1; //n을 2부터 n제곱근까지로 나눠지지 않으면 소수
	}
}
void dfs(string numbers, vector<int> chkset)
{
	if (chkset.size() == numbers.size()) //탐색 탈출 조건 : 모든 숫자카드를 다 사용했을 경우
		return;
	else
	{
		for (int i = 0; i < numbers.size(); ++i) //탐색 탈출 조건 :모든 숫자카드를 다 탐색했는 경우
		{
			bool chk = 0;
			for (auto c : chkset) //숫자카드가 이미 사용됐으면 다음 숫자카드를 탐색
			{
				if (i == c)
				{
					chk = 1;
					break;
				}
			}
			if (chk == 0) //숫자카드가 사용되지 않았으면
			{
				chkset.push_back(i); //체크셋에 해당 숫자카드 추가
				string num = "";
				for (auto s : chkset)
				{
					num += numbers[s]; //체크셋에 저장된 숫자카드들을 순차적으로 붙여서
				}
				nums.push_back(stoi(num)); //숫자로 만든 다음 nums에 추가
				dfs(numbers, chkset); //새로운 숫자카드가 추가된 체크셋으로 또 탐색
				chkset.pop_back(); //dfs가 끝나면(모든 숫자 카드를 다 사용한 경우 or 현재 체크셋에서 모든 경우를 다 구한 경우) 체크셋에서 해당 숫자카드를 빼고 다음 숫자카드 탐색
			}
		}
	}
}
int solution(string numbers) {
	int answer = 0;
	vector<int> chkset;
	unordered_map<int, int> map;
	dfs(numbers, chkset);
	for (auto num : nums) //맵에다가 만들어진 숫자들을 넣어서 중복 숫자를 없애줌
	{
		map[num] = num;
	}
	for (auto m : map) //맵의 숫자들을 소수인지 판별해서 카운트
	{
		if (chksosu(m.second))
			++answer;
	}
	return answer;
}

int main()
{
	string numbers = "1111";
	cout<< solution(numbers);
	cout << "---------------\n";
	for (auto i : nums)
	{
		cout << i << " ";
	}
}
