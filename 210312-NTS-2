/*
STRING 벡터 형태로 2차원 배열이 주어지고
구슬이 위에서 0번째 인덱스부터 drum.size()-1 인덱스 범위에서 떨어짐
#를 만나면 아래쪽
>를 만나면 오른쪽
<를 만나면 왼쪽
*를 처음 만나면 아래쪽
*를 두번째 만나면 정지
구슬이 정지안되고 쭉 떨어지는 경우를 구하시오 (입력이 2차원 배열 밖으로 벗어나는 경우는 주어지지 않음)  
*/
#include <string>
#include <vector>
using namespace std;
int solution(vector<string> drum) {
    int answer = 0;
    for(int i=0;i<drum.size();++i)
    {
        int ny=0; //시작 좌표의 y 좌표는 무조건 0
        int nx=i; //시작 좌표의 x 좌표
        bool starchk=false; //별을 한번 만나면 true가 됨
        bool chk=true; //밑으로 떨어지면 그대로 true, 정지되면 false가 됨
        while(ny<drum.size()) //배열 아래로 떨어지면 탐색 종료되고 chk=true가 됨 
        {
            if(drum[ny][nx]=='#') //문자 값에 따라 좌표 값을 이동하고 탐색함
            {
                ny=ny+1;
                continue;
            }
            if(drum[ny][nx]=='>')
            {
                nx=nx+1;
                continue;
            }
            if(drum[ny][nx]=='<')
            {
                nx=nx-1;
                continue;
            }
            if(drum[ny][nx]=='*') //별을 만나면
            {
                if(starchk==false) //별을 처음 만난 경우
                {
                    starchk=true; //별을 만났다는 표시 해줌
                    ny=ny+1; //좌표 값 이동하고 탐색
                    continue;
                }
                else //별을 두번째 만난 경우
                {
                    chk=false; //구슬이 정지됐다고 표시해주고
                    break; //탐색 종료
                }
            }
        }
        if(chk==true)
            ++answer; //구슬이 잘내려온 경우만 카운트해줌
    }
    return answer;
}
