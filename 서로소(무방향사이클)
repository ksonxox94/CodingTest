#include<iostream>
#include<vector>
using namespace std;
int findParent(vector<int> &parent, int x)
{
	//부모노드를 찾아주는 함수
	if (parent[x] != x)
		parent[x] = findParent(parent, parent[x]);
	return parent[x];
}
void unionParent(vector<int> &parent, int a,int b)
{
	//a b는 이어져있음
	a = findParent(parent, a);//a의 부모노드
	b = findParent(parent, b);//b의 부모노드
	//두 수를 비교해서 큰 수의 부모 노드가 작은 수가 되게 함
	if (a < b) 
		parent[b] = a;
	else
		parent[a] = b;
}
int main() //무방향 그래프일 때 서로소 집합을 통해 사이클 판별
{
	int v, e;
	cin >> v >> e;
	vector<int> parent(v + 1, 0);
	for (int i = 1; i < v + 1; ++i)
	{
		parent[i] = i; //1 2 3 4 5 6
	}
	
	bool cycle = false;

	for (int i = 0; i < e; ++i)
	{
		int a, b;
		cin >> a >> b;
		if(findParent(parent, a) == findParent(parent, b))
		{
			cycle = true;
			break;
		}
		else
			unionParent(parent, a, b);
	}

	if (cycle)
		cout << "사이클 발생";
	else
		cout << "사이클 발생하지 않음";

	/*
	1 4  parent:1 2 3 1 5 6
	2 3  parent:1 2 2 1 5 6
	2 4  parent:1 1 2 1 5 6
	5 6  parent:1 1 2 1 5 5
	
	cout << "각 원소가 속한 집합:";
	for (int i = 1; i < v + 1; ++i)
		cout << findParent(parent, i)<<" ";
	cout << "\n";

	1:1
	2:1
	3:1
	4:1
	5:5
	6:5

	cout << "부모 테이블:";
	for (int i = 1; i < v + 1; ++i)
		cout << parent[i] << " ";
	//1 1 1 1 5 5
	*/
	return 0;
}
