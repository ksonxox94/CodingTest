#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;
bool compare(string a, string b)
{
   if (a.length() == b.length())
      return a < b;
   else
   {
      return a.length() < b.length();
   }
}
vector<int> solution(vector<string> words, vector<string> queries)
{
   vector<int> answer;
   vector<string> rwords;
   sort(words.begin(), words.end(), compare);
   for (int i = 0; i < words.size(); ++i)
   {
      string temp = words[i];
      reverse(temp.begin(), temp.end());
      rwords.push_back(temp);
   }
   sort(rwords.begin(), rwords.end(), compare);
   for (int i = 0; i < queries.size(); ++i)
   {
      string query = queries[i];
      int start, end, pos;
      if (query[0] == '?')
      {
         reverse(query.begin(), query.end());
         pos = query.find("?");
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'a';

         }
         start = lower_bound(rwords.begin(), rwords.end(), query, compare) - rwords.begin();
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'z';
         }
         end = upper_bound(rwords.begin(), rwords.end(), query, compare) - rwords.begin();
      }
      else
      {
         pos = query.find("?");
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'a';
         }
         start = lower_bound(words.begin(), words.end(), query, compare) - words.begin();
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'z';
         }
         end = upper_bound(words.begin(), words.end(), query, compare) - words.begin();
      }
      answer.push_back(end - start);
   }
   return answer;
}
int main()
{
   vector<string> words;
   vector<string> queries;
   int n, m;
   cin >> n >> m;
   for (int i = 0; i < n; ++i)
   {
      string word;
      cin >> word;
      words.push_back(word);
   }
   for (int i = 0; i < m; ++i)
   {
      string query;
      cin >> query;
      queries.push_back(query);
   }
   vector<int> answer = solution(words, queries);
   for (int i = 0; i < answer.size(); ++i)
   {
      cout << answer[i] << " ";
   }
   return 0;
}
