#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
/*
<key> bra??
<words> ant brake brave crown brazill

upper bound= 키 값이 중간 값 "이상"이면 left=mid+1, 키 값이 중간 값 "미만"이면 right=mid 해서 최종적으로 key 값 보다 큰 값중 가장 작은 값의 인덱스
<key> brazz
left=0
right=5
mid=0+5/2=2
mid[2]=brave
brazz>=brave left=mid+1=3

left=3
right=5
mid=3+5/2=4
mid[4]=brazill
brazz<brazill right=mid=4

left=3
right=4
mid=3+4/2=3
mid[3]=crown
brazz<crown right=mid=3

return 3


lower bound= 키 값이 중간 값 "초과"면 left=mid+1, 키 값이 중간 값 "이하"면 right=mid해서 최종적으로 key 값을 만족하는 가장 작은 값의 인덱스
left=0
right=5
mid=0+5/2=2
mid[2]=brave
bra??<=brave right=mid=2

left=0
right=2
mid=0+2/2=1
mid[1]=brake
bra??<=brake right=mid=1

left=0
right=1
mid=0+1/2=0
mid[0]=ant
bra??>ant left=mid+1=1

return 1

*/
using namespace std;
bool compare(string a, string b)
{
   if (a.length() == b.length()) //길이가 같으면 아스키코드 순 정렬
      return a < b;
   else
   {
      return a.length() < b.length(); //길이가 다르면 길이 순 정렬
   }
}
vector<int> solution(vector<string> words, vector<string> queries)
{
   vector<int> answer;
   vector<string> rwords;
   sort(words.begin(), words.end(), compare);
   for (int i = 0; i < words.size(); ++i)
   {
      string temp = words[i];
      reverse(temp.begin(), temp.end());
      rwords.push_back(temp);
   }
   sort(rwords.begin(), rwords.end(), compare);
   for (int i = 0; i < queries.size(); ++i)
   {
      string query = queries[i];
      int start, end, pos;
      if (query[0] == '?')
      {
         reverse(query.begin(), query.end());
         pos = query.find("?");
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'a';

         }
         start = lower_bound(rwords.begin(), rwords.end(), query, compare) - rwords.begin();
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'z';
         }
         end = upper_bound(rwords.begin(), rwords.end(), query, compare) - rwords.begin();
      }
      else
      {
         pos = query.find("?");
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'a';
         }
         start = lower_bound(words.begin(), words.end(), query, compare) - words.begin();
         for (int i = pos; i < query.length(); ++i)
         {
            query[i] = 'z';
         }
         end = upper_bound(words.begin(), words.end(), query, compare) - words.begin();
      }
      answer.push_back(end - start);
   }
   return answer;
}
int main()
{
   vector<string> words;
   vector<string> queries;
   int n, m;
   cin >> n >> m;
   for (int i = 0; i < n; ++i)
   {
      string word;
      cin >> word;
      words.push_back(word);
   }
   for (int i = 0; i < m; ++i)
   {
      string query;
      cin >> query;
      queries.push_back(query);
   }
   vector<int> answer = solution(words, queries);
   for (int i = 0; i < answer.size(); ++i)
   {
      cout << answer[i] << " ";
   }
   return 0;
}
