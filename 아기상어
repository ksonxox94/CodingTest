#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int dy[4] = { -1,0,0,1 }; //북서동남
int dx[4] = { 0,-1,1,0 };
struct pos
{
	int y;
	int x;
	int time;
};
struct compare
{
	bool operator()(pos a, pos b)
	{
		if (a.time == b.time)//거리가 같다면
		{
			if (a.y == b.y)//위에 있는게 같다면
				return a.x > b.x;//왼쪽에 있는게 3순위
			else
				return a.y > b.y;//위에 있는게 2순위
		}
		else
			return a.time > b.time; //거리가 가까운게 1순위
	}
};
int main()
{
	int shark_size = 2; //상어 초기 크기
	int eat = 0; //상어가 먹은 물고기 수
	int total_time = 0; //구해야 할 총 시간
	int keytime = -1;//물고기를 먹었을 때 좌표까지 걸리는 시간을 임시로 저장하는 변수
	int n;
	cin >> n;
	priority_queue<pos, vector<pos>, compare> wq; //우선순위 큐([1]가까운 거리 [2]윗쪽 [3]왼쪽 순)
	vector<vector<int>> map(n, vector<int>(n, 0)); //원본 맵
	vector<vector<int>> temp_map(n, vector<int>(n, 0)); //상어의 방문 처리를 할 복사맵
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			cin >> map[i][j]; //원본 맵
			temp_map[i][j]=map[i][j]; //맵 복사
			if (map[i][j] == 9) //처음 상어 위치를
			{
				wq.push({ i,j,0 }); //{상어 위치,시간} 큐에 넣어줌
				temp_map[i][j] = -1; //방문한 곳은 -1로 바꿔줌
				map[i][j] = 0; //원본 맵에서는 아무것도 없으므로 0임
			}
		}
	}
	while (!wq.empty())//큐가 빌 때 까지
	{
		pos now = wq.top();
		wq.pop();
		if (now.time==keytime)//큐에서 뽑은 좌표의 시간이 물고기를 먹었을 때의 시간과 같다면
		{
			if (temp_map[now.y][now.x] == -2)//그리고 큐에서 뽑은 좌표에 물고기를 먹을 수 있다는 처리가 되있다면 (처리 X시 바로 큐의 다음 인덱스를 탐색함) 
			{
				keytime = -1;//keytime을 초기화
				total_time = total_time + now.time;//전체 걸린 시간=전체 걸린 시간+물고기를 먹은 좌표까지 걸린 시간
				++eat; //먹은 물고기 카운팅
				for (int i = 0; i < n; ++i)//복사 맵을 원본 맵으로 초기화
				{
					for (int j = 0; j < n; ++j)
					{
						temp_map[i][j] = map[i][j];
					}
				}
				temp_map[now.y][now.x] = -1; //복사 맵에 상어가 있는 좌표를 방문 처리
				map[now.y][now.x] = 0; //원본 맵에는 물고기가 사라졌으므로 0
				if (eat == shark_size)//먹은 물고기 수가 상어 크기랑 같으면
				{
					++shark_size;//상어 크기 1 키워줌
					eat = 0;//먹은 물고기 초기화
				}
				wq = priority_queue<pos, vector<pos>, compare>();//큐 초기화
				wq.push({ now.y,now.x,0 });//큐에 {먹은 물고기 좌표,시간}을 넣음
			}
		}
		else
		{
			for (int d = 0; d < 4; ++d) //상하좌우 탐색
			{
				int newY = now.y + dy[d];
				int newX = now.x + dx[d];
				if (0 <= newY && newY < n && 0 <= newX && newX < n)//탐색한 좌표가 맵 안이면
				{
					if (0 < temp_map[newY][newX] && temp_map[newY][newX] < shark_size) //탐색한 좌표에 물고기가 있고 상어보다 작으면
					{
						wq.push({ newY,newX,now.time + 1 });//{탐색한 좌표,현재시간+1}을 큐에 넣음
						temp_map[newY][newX] = -2;//탐색한 좌표에 -2로 물고기를 먹을 수 있다고 표시함
						keytime = now.time + 1;//keytime에 물고기를 먹을 수 있을 때 좌표까지 걸린 시간을 저장함
					}
					else if (temp_map[newY][newX] == 0 || temp_map[newY][newX] == shark_size)//탐색한 좌표가 빈 칸이거나 물고기가 상어 크기랑 같으면
					{
						wq.push({ newY,newX,now.time + 1 });//{탐색한 좌표,현재시간+1}을 큐에 넣음 
						temp_map[newY][newX] = -1;//탐색한 좌표를 -1로 방문 처리함
					}
				}
			}
		}
	}
	cout << total_time;
	return 0;
}
