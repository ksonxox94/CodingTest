#include<iostream>
#include<vector>
using namespace std;
int dy[4] = { 1,1,-1,-1 }; //북->동 동->남 남->서 서->북
int dx[4] = { 1,-1,-1,1 };
struct position
{
	int y;
	int x;
};
int n;
int m;
int minLength = 999999999;
int length = 0;
vector<position> v; //모든 치킨집 위치를 저장하는 벡터 
position arr[13]; //선택한 m개의 치킨집 위치를 저장하는 배열 
int map[51][51]; //지도(0:땅 1:집 2:치킨집 3:치킨집과 매칭한 집)
position pos;
bool findHome(int map[][51])//치킨집과 매칭 처리가 안된 집이 있는지 확인하는 함수
{
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
		{
			if (map[i][j] == 1)
			{
				return true;
				break;
			}
		}
	}
	return false;
}
void function1(int map[][51], position pos, int cnt) //치킨집 기준 마름모 모양으로 집을 탐색해서 거리를 구하는 함수
{   //cnt는 치킨집 좌표 기준 마름모의 꼭지점까지 거리(탐색할 마름모 한 변의 좌표 수)
	int y = pos.y - cnt; //y는 치킨집 좌표 기준으로 cnt만큼 위의 꼭지점이 됨
	int x = pos.x;
	int r = 0; //방향 전환을 위한 변수 0:북->동 1:동->남 2:남->서 3:서->북
	int i = 0;
	while (i < 4 * cnt)//cnt에 4를 곱하면 마름모를 이루는 전체 좌표의 수가 됨
	{
		for (int j = 0; j < cnt; j++) //cnt만큼 순회하면 한 변의 좌표들을 모두 순회하게 됨
		{
			y = y + dy[r];
			x = x + dx[r];
			if (y<1 || x<1 || y>n || x>n)
			{
				continue; //범위를 초과하면 탐색하지 않고 넘김
			}
			if (map[y][x] == 1) //매칭 처리되지 않은 집을 찾으면 치킨집을 기준으로 집까지 거리를 구하고 총 거리에 합산함
			{
				length = length + abs(pos.x - x) + abs(pos.y - y);
				map[y][x] = 3;//매칭 처리한 집을 3으로 바꿈
			}
		}
		i = i + cnt;
		r++; //cnt만큼 for문을 순회하면 한 변이 끝났으므로 방향전환을 해줌
	}
}
void function(int m, int value, int c)
{
	if (c == m)
	{//치킨집을 m개 골라서 arr에 담은 상태
		int copyMap[51][51];
		int cnt = 1;//치킨집 좌표를 기준으로 마름모를 탐색할 범위
		length = 0;//치킨집 m개를 선택했을때 최소 거리 
		for (int i = 1; i <= n; ++i)
		{
			for (int j = 1; j <= n; ++j)
			{
				copyMap[i][j] = map[i][j]; //선정된 m개의 치킨집에 따른 최소 거리를 구하기 위한 맵을 복사함
			}
		}
		for (;;)
		{
			if (findHome(copyMap) == false) //더 이상 매칭되지 않은 집이 없으면 다음 경우의 수로 넘어감 
			{
				break;
			}
			for (int i = 0; i < m; ++i) //m개의 치킨집을 기준으로 최소 거리를 구함
			{
				function1(copyMap, arr[i], cnt); //m개의 치킨집을 기준으로 최소 거리를 구할려면 동시에 같은 범위만큼 집을 탐색해야함
			}
			++cnt; //마름모의 범위를 넓혀서 탐색함
		}
		if (minLength > length) //최소값
		{
			minLength = length;
		}
	}
	else
	{
		//모든 치킨집들이 저장되어있는 v벡터로부터 m개의 치킨집을 선택하는 경우의 수로부터 최소 거리를 구함
		for (int i = value; i < v.size(); i++)
		{
			arr[c] = v[i];
			function(m, i + 1, c + 1); //i++하면 i=i+1이므로 for문의 i에도 영향 가서 안됨
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	cin >> m;
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
		{
			cin >> map[i][j];
		}
	}
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
		{
			if (map[i][j] == 2)
			{
				pos.y = i;
				pos.x = j;
				v.push_back(pos); //모든 치킨 집 좌표를 탐색해 벡터에 넣어줌
			}
		}
	}
	function(m, 0, 0); //(치킨집 중 m개를 선택)조합 처리 후 거리를 계산하는 함수
	cout << minLength;
	return 0;
}
