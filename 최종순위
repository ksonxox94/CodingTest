#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int t;
	cin >> t;
	for (int i = 0; i < t; ++i)
	{
		int n;
		cin >> n;
		vector<int> nv(n, 0);
		vector<vector<bool>> graph(n+1,vector<bool>(n+1,false));
		vector<int> idg(n+1, 0);
		
		for (int j = 0; j < n; ++j)
			cin >> nv[j];
	
		for (int l = 0; l < n-1; ++l)
		{
			for (int m = l + 1; m < n; ++m)
			{
				graph[nv[l]][nv[m]] = true;
				++idg[nv[m]];
			}
		}

		int m;
		cin >> m;
		if (m == 0)
		{
			for (int j = 0; j < n; ++j)
				cout << nv[j] << " ";
			cout << "\n";
		}
		else
		{
			for (int k = 0; k < m; ++k)
			{
				int a, b;
				cin >> a >> b;
				if (graph[a][b] == true)
				{
					graph[a][b] = false;
					graph[b][a] = true;
					--idg[b];
					++idg[a];
				}
				else
				{
					graph[a][b] = true;
					graph[b][a] = false;
					++idg[b];
					--idg[a];
				}
			}
			queue<int> q;
			vector<int> result;
			for (int j = 1; j < n+1; ++j)
			{
				if (idg[j] == 0)
				{
					q.push(j);
					result.push_back(j);
				}
			}

			for(int nc=0;nc<n;++nc)
			{
				if (q.empty()) //모든 노드를 방문 전 큐가 비면 사이클 발생
				{
					cout << "IMPOSSIBLE\n";
					break;
				}
				int now = q.front();
				q.pop();
				int qc = 0;
				for (int j = 1; j < n + 1; ++j)
				{
					if (graph[now][j] == true)
					{
						--idg[j];
						if (idg[j] == 0)
						{
							q.push(j);
							result.push_back(j);
							++qc;
						}
					}
				}
				if (qc > 1) //now에서 큐에 들어가는 경우가 2번 이상일 때 확실한 순서 X
				{
					cout << "?\n";
					break;
				}
				if (nc == n - 1) //확실히 순위 예측 가능한 경우
				{
					for (int ii = 0; ii < n; ++ii)
					{
						cout << result[ii] << " ";
					}
					cout << "\n";
				}
			}
		}
	}
}
