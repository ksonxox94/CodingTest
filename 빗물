#include<iostream>
#include<vector>
#include<queue>
using namespace std;
struct node
{
	int val;
	int idx;
};
struct compare
{
	bool operator()(node a, node b)
	{
		return a.val < b.val;
	}
};
int main()
{
	int h;
	int w;
	int sum = 0;
	cin >> h >> w;
	vector<int> block(w, 0); //블록 값 입력받은 벡터
	priority_queue<node, vector<node>,compare> q;//블록 높은 값 우선 순위 큐
	for (int i = 0; i < w; ++i)
	{
		cin >> block[i];
		q.push({ block[i], i });
	}
	node high;
	high = q.top(); //high 블록은 가장 높은 블록
	q.pop();
	block[high.idx] = -1; //블록을 계산했다는 표시를 -1
	while (!q.empty())//모든 블록을 처리할 때 까지
	{
		node now = q.top();//now 블록은 high 블록 다음으로 높은 블록
		q.pop();
		int start;
		int end;
		if (block[now.idx] >= 0)//처리된 블록일 경우 이미 계산이 완료됐으므로 패스 
		{
			if (high.idx > now.idx)//now 블록...high 블록 순이면
			{
				start = now.idx + 1; //now 블록 다음 블록부터
				end = high.idx; //high 블록 전까지 탐색
			}
			else//high 블록...now 블록 순이면
			{
				start = high.idx + 1; //high 블록 다음 블록부터
				end = now.idx; //now 블록 전 블록까지 탐색
			}
			for (int i = start; i < end; ++i)
			{
				if (block[i] >= 0) //처리되지 않은 블록이라면 
				{
					sum = sum + (now.val - block[i]); // now 블록 값 - 탐색한 블록 값 후 합산
					block[i] = -1; //계산한 블록 -1 처리
				}
			}
			block[now.idx] = -1; //now 블록도 계산 처리
		}
		high = now; //now 블록이 high 블록이 되고 과정 반복
	}
	cout << sum;
}
/*
가장 높은 블록을 기준으로 두번째 높은 블록을 찾아 두 블록 사이에서
두번째 높은 블록 값-두 블록 사이에 있는 블록 값을 계산해서 더하면 물웅덩이 깊이가 됨
큐에서 꺼내지고 물웅덩이가 계산된 블록은 -1 처리해줘서 중복계산되지 않도록 함
다음 과정에서 가장 높은 블록은 현재에서 두번째 높은 블록이 됨
이 과정을 블록 값이 저장된 큐가 빌때까지 계속 반복하면 모든 물웅덩이 값을 구할 수 있음
*/
