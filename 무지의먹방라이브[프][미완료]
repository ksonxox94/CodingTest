/*
https://programmers.co.kr/learn/courses/30/lessons/42891
*/

#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

bool compare(pair<int, int> a, pair<int, int> b) {
	return a.second < b.second; //정렬이 일어나는 방향으로 
}
int solution(vector<int> food_times, long long k)
{
	vector<pair<int, int>> foods;
	int n = food_times.size();
	for (int i = 0; i < n; ++i)
		foods.push_back({food_times.at(i),i+1});
	sort(foods.begin(), foods.end()); //default일 경우 first 기준으로 오름차순 정렬, 같을땐 second 기준으로 오름차순
	int pretime = 0;
	for (vector<pair<int, int>>::iterator it = foods.begin(); it != foods.end(); ++it, --n)
	{
		long long time = (it->first-pretime)*n;
		if (time == 0) continue;
		if (time <= k)
		{
			k=k-time;
			pretime=it->first;
		}
		else
		{
			k = k % n;
			sort(it, foods.end(), compare);
			return (it + k)->second;
		}
	}
	return -1;
}

int solution2(vector<int> food_times, long long k) {
	long long total = 0;
	for (int i = 0; i < food_times.size(); ++i) {
		total += food_times[i];
	}
	if (total <= k) return -1;
	priority_queue<pair<int, int> > pq;
	for (int i = 0; i < food_times.size(); ++i) {
		pq.push(make_pair( -food_times[i], i + 1));
	}
	total = 0;
	long long previous = 0;
	long long length = food_times.size();

	while (total + ((-pq.top().first-previous)*length) <= k) {
		int now = -pq.top().first;
		pq.pop();
		total += (now - previous) * length;
		length -= 1;
		previous = now;
	}

	vector<pair<int, int> > result;
	while (!pq.empty()) {
		int food_time = -pq.top().first;
		int num = pq.top().second;
		pq.pop();
		result.push_back({ food_time, num });
	}
	sort(result.begin(), result.end(), compare);
	return result[(k - total) % length].second;
}

//////////////////////////////////////////////////////////////////////////////

#include <string>
#include <vector>
#include <iostream>

using namespace std;
int solution(vector<int> food_times, long long k) 
{
	int totalfood = 0;
	int cnt = 0;
	for (int i = 0; i < food_times.size(); ++i)
	{
		totalfood = totalfood + food_times[i];
	}
	if (k > totalfood)
		return -1;

	int i = 0;
	while(k>=0)
	{
		if (k == 0 && food_times[i] == 0)
		{
			i++;
			continue;
		}
		if (k == 0 && food_times[i] > 0)
		{
			return i + 1;
		}
		if (food_times[i] > 0)
		{
			food_times[i] = food_times[i] - 1;
			k--;
			cnt++;
		}
		i++;
		if (i == food_times.size())
		{
			i = 0;
		}
		cout << "k가 "<<k<< "일 때 상태:";
		for (int i = 0; i < food_times.size(); i++)
		{
			cout << food_times[i];
		}
		cout << "\n";
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	long long k;
	cin >> n;
	cin >> k;
	vector<int> food_times(n);
	for (int i = 0; i < food_times.size(); ++i)
	{
		cin >> food_times[i];
	}
	cout << solution(food_times, k);
}
