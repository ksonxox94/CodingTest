#include<iostream>
#include<vector>
using namespace std;
struct node
{
	char data; //노드의 값
	node *left; //레프트 노드 포인터
	node *right; //라이트 노드 포인터
};
void preorder(node *ptr)
{//페런트->레프트->라이트
	if(ptr) // 포인터가 가리키는 곳이 NULL이면 재귀 빠져나옴
	{
		cout << ptr->data;
		preorder(ptr->left);
		preorder(ptr->right);
	}
}
void inorder(node *ptr)
{//레프트->페런트->라이트
	if (ptr)
	{
		inorder(ptr->left);
		cout << ptr->data;
		inorder(ptr->right);
	}
}
void postorder(node *ptr)
{//레프트->라이트->페런트
	if (ptr)
	{
		postorder(ptr->left);
		postorder(ptr->right);
		cout << ptr->data;
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	cin >> n;
	vector<node> nodes(n, { 0,NULL,NULL }); //data,&left_node,&right_node
	for (int i = 0; i < n; ++i)
	{
		char data, left, right;
		cin >> data >> left >> right;
		nodes[int(data - 'A')].data = data; //A가 루트노드이고 알파벳 대문자는 A부터 Z까지 1씩 증가되므로 
		if (left == '.')
			nodes[int(data - 'A')].left = NULL;
		else
			nodes[int(data - 'A')].left = &nodes[int(left - 'A')]; //기준 노드의 LEF에 입력 받은 노드 주소 연결
		if (right == '.')
			nodes[int(data - 'A')].right = NULL; 
		else
			nodes[int(data - 'A')].right = &nodes[int(right - 'A')]; //기준 노드의 RIGHT에 입력 받은 노드 주소 연결
	}
	preorder(&nodes[0]);
	cout << "\n";
	inorder(&nodes[0]);
	cout << "\n";
	postorder(&nodes[0]);
}
