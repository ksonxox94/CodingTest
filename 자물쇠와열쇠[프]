/*
https://programmers.co.kr/learn/courses/30/lessons/60059
*/
#include <string>
#include <vector>
#include <iostream>

using namespace std;

//1.왼쪽 90도 회전=오른쪽 90도 회전 3번(왼쪽 회전은 구현할 필요 없음)
//2.lock 2차원배열을 lock.size+2(key.size-1) 늘린 다음 모든 좌표점에서 시작하는 회전한 key의 값과 더함
//3.그리고 기존 lock 2차원 배열의 모든 값이 1이면 true 아니면 false임
bool solution(vector<vector<int>> key, vector<vector<int>> lock) {
	bool answer = false;
	int M = key.size();
	int N = lock.size();
	for (int time = 0; time < 4; time++) {

		vector<vector<int>> newkey(M, vector<int>(M, 0));

		for (int i = 0; i < M; i++)
			for (int j = 0; j < M; j++)
				newkey[i][j] = key[M - 1 - j][i];

		for (int i = 0; i < M; i++)
			for (int j = 0; j < M; j++)
				key[i][j] = newkey[i][j];


		for (int i = 0; i < N + M - 1; i++) {
			for (int j = 0; j < N + M - 1; j++) {

				vector<vector<int>> newlock(2 * M - 2 + N, vector<int>(2 * M - 2 + N, 0));

				//기존 lock 부분 값 넣어주기 
				for (int ii = 0; ii < N; ii++)
				{
					for (int jj = 0; jj < N; jj++)
					{
						newlock[ii + M - 1][jj + M - 1] = lock[ii][jj];
					}
				}

				//
				for (int ii = 0; ii < M; ii++) {
					for (int jj = 0; jj < M; jj++) {
						newlock[ii + i][jj + j] += newkey[ii][jj];
					}
				}

				int count = 0;
				for (int ii = M - 1; ii < M + N - 1; ii++) {
					for (int jj = M - 1; jj < M + N - 1; jj++) {
						if (newlock[ii][jj] == 1) {
							count++;
						}
					}
				}
				if (count == N * N) {

					return true;
				}
			}
		}
	}
	return false;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int m;
	int n;
	cin >> m;
	cin >> n;
	vector<vector<int>> key(m, vector<int>(m, 0));
	vector<vector<int>> lock(n, vector<int>(n, 1));
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			cin >> key[i][j];
		}
	}
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			cin >> lock[i][j];
		}
	}
	cout << solution(key, lock);
	return 0;
}
