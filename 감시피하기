#include<iostream>
#include<vector>
using namespace std;
int n;
bool chk = false; //벽을 3개 세워서 감시를 막게 되면 true가 됨
vector<pair<int, int>> v; //선생님 좌표 저장 벡터
int dy[4] = { -1,0,1,0 }; //북동남서
int dx[4] = { 0,1,0,-1 };
bool  checkMap(char map[][7])
{
	for (int i = 0; i < v.size(); ++i)//선생님이 있는 모든 좌표를 탐색해서 3개의 벽이 세워진 맵에서 학생을 볼수 있는지 없는지 탐색
	{
		for (int j = 0; j < 4; ++j)//북동남서 방향으로 해당 라인 탐색
		{
			int ty = v[i].first;
			int tx = v[i].second;
			while (0 < ty && ty <= n && 0 < tx && tx <= n)
			{
				ty = ty + dy[j];
				tx = tx + dx[j];
				if (map[ty][tx] == 'S')//학생을 보게되면 바로 false 리턴
				{
					return false;
				}
				else if (map[ty][tx] == 'O')//벽을 만나면 해당 라인 탐색 종료하고 다음 방향 라인 탐색
					break;
			}
		}
	}
	return true; //학생을 못보게 되면 true 리턴
}
void dfs(int wall, char map[][7])
{
	if (wall == 3 && chk == false)//벽이 3개이고 벽을 3개 세웠을때 선생님이 학생을 못 보는 경우를 아직 못구했다면 
	{
		if (checkMap(map) == true)//3개의 벽을 세웠을때 선생님이 학생을 못보게 되는지 검증
		{
			chk = true; //못보게 되면 chk를 true로 바꿈
		}
	}
	else if (chk == false && wall < 3) //벽을 아직 3개 세우기 전이고 벽을 3개 세웠을때 선생님이 학생을 못 보는 경우를 아직 못구했다면 
	{
		for (int i = 1; i <= n; ++i)
		{
			for (int j = 1; j <= n; ++j)
			{
				if (map[i][j] == 'X')//X 좌표를 찾아 벽을 세우고
				{
					map[i][j] = 'O'; //해당 좌표에 벽을 세우고
					wall++; //세운 벽 개수를 올리고
					dfs(wall, map); //바뀐 벽과 맵을 dfs 넘김
					wall--; //dfs가 끝나면 다시 원래대로 복구
					map[i][j] = 'X';
				}
			}
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	char arr[7][7];
	cin >> n;
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
		{
			cin >> arr[i][j];
			if (arr[i][j] == 'T') //선생님이 있는 좌표만 따로 벡터에 넣어줌
				v.push_back(make_pair(i, j));
		}
	}
	dfs(0, arr);//3개의 벽을 쌓는 모든 경우의 수를 DFS로 구함
	if (chk == true)
		cout << "YES";
	else
		cout << "NO";
}
