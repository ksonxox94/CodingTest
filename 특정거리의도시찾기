#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;
int n;
vector<int> graph[300001]; //vector<int> graph[index] : index 노드부터 한번에 갈 수 있는 노드 목록
int route[300001]; //int route[index] : 시작점 노드부터 index 노드 까지 최단 거리
void bfs(int start) {
	queue<int> q;
	q.push(start);//시작점 노드부터 큐에 넣어줌
	while (!q.empty()) {
		int x = q.front(); //큐에서 프론트 노드 꺼내줌
		q.pop();
		for (int i = 0; i < graph[x].size(); i++) { // x노드에서 갈 수 있는 노드 탐색 
			int y = graph[x][i]; // y = x노드에서 접근한 노드
			if (route[y] == 0 && y!=1) { // 최단거리가 0이고 접근한 노드가 1이 아니면 새로 갱신
				route[y] = route[x] + 1; //x노드까지 최단거리에서 1 더해줌
				q.push(y); //큐에 x노드로부터 접근한 노드 넣어줌
			}
		}
	}
}
int main() {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	int m, k, x;
	cin >> n >> m >> k >> x;
	for (int i = 0; i < m; i++) {
		int from, to;
		cin >> from >> to;
		graph[from].push_back(to);
	}
	route[x] = 0;
	bfs(x);
	vector<int> answer;
	for (int i = 1; i <= n; i++) {
		if (route[i] == k)
			answer.push_back(i);
	}
	if (answer.size() == 0) cout << -1 << "\n";
	else {
		sort(answer.begin(), answer.end());
		for (int i = 0; i < answer.size(); i++) {
			cout << answer[i] << "\n";
		}
	}
}
