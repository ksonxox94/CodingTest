#include<iostream>
#include<string.h>
using namespace std;

int findHome(int arr[][20], int i, int j, int k, int n)
{
	int point_i = i - (k - 1);
	int point_j = j;
	int home = 0;
	if (k == 1 && arr[point_i][point_j] == 1)
	{
		home++;
		arr[point_i][point_j] == 2;
	}
	for (int i = 0; i < 4 * (k - 1); i++)
	{
		if (i < (k - 1))
		{
			point_i = point_i + 1;
			point_j = point_j - 1;
		}
		else if (i < 2 * (k - 1))
		{
			point_i = point_i + 1;
			point_j = point_j + 1;
		}
		else if (i < 3 * (k - 1))
		{
			point_i = point_i - 1;
			point_j = point_j + 1;
		}
		else if (i < 4 * (k - 1))
		{
			point_i = point_i - 1;
			point_j = point_j - 1;
		}
		if (point_i >= 0 && point_j >= 0 && point_i < n && point_j < n && arr[point_i][point_j] != 2)
		{
			if (arr[point_i][point_j] == 1)
			{
				home++;
			}
			arr[point_i][point_j] = 2;
		}
	}
	return home;
}

int main(int argc, char** argv)
{
	int test_case;
	int T;
	cin >> T;
	for (test_case = 1; test_case <= T; ++test_case)
	{
		int arr[20][20];
		int temparr[20][20];
		int n=0;
		int m=0;
		int home=0;
		int kmoney=0;
		int profit=0;
		int max_home=0;
		cin >> n >> m;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cin >> arr[i][j];
			}
		}
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				memcpy(temparr, arr, sizeof(arr));
				home = 0;
				for (int k = 1; k <= n + 1; k++)
				{
					kmoney = k * k + (k - 1)*(k - 1);
					home = home + findHome(temparr, i, j, k, n);
					profit = m * home - kmoney;
					if (profit >= 0)
					{
						if (home > max_home)
						{
							max_home = home;
						}
					}
				}
			}
		}
		cout << "#" << test_case << " " << max_home<<"\n";
	}
	return 0;
}
