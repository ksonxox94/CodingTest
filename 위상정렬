#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
	int v, e;
	cin >> v >> e;
	vector<int> indgr(v + 1, 0); //노드의 진입차수 벡터
	vector<int> graph[100]; //간선 벡터
	for (int i = 0; i < e; ++i)
	{
		int a, b;
		cin >> a >> b;
		graph[a].push_back(b);
		indgr[b]++;
	}

	vector<int> result;
	queue<int> q;

	for (int i = 1; i < v + 1; ++i)
	{
		if (indgr[i] == 0) //진입차수가 0인 노드 일단 큐에 넣음
			q.push(i);
	}

	while (!q.empty())
	{
		int now = q.front(); //간선 없는 노드 큐에서 빼서
		result.push_back(now); //결과 리스트에 추가
		q.pop();

		for (auto i : graph[now])//간선 없는 노드에서 갈 수 있는 노드 탐색
		{
			indgr[i] = indgr[i] - 1; //그 노드에서 간선 1개 빼줌
			if (indgr[i] == 0) //그 노드에 간선이 0개이면
				q.push(i); //큐에다가 넣음
		}
	}

	for (auto i : result)
	{
		cout << i << " ";
	}
	cout << "\n";
}

/*
위상 정렬 알고리즘
:노드를 순서대로 완료하고 방문할 수 있게 나열하는 알고리즘(선수과목을 고려한 학습 순서 설정) 

진입차수가 없는 노드를 큐에다가 넣고 큐가 빌때까지 while문 돌림
----------while(!q.empty())------------------------
큐의 front 노드를 꺼낸 다음 result에 추가하고 pop하고 갈수있는 노드 탐색함.
갈수있는 노드의 진입차수를 -1 하고 0이 되면 큐에다가 넣어줌.
--------------------------------------------------------------------------

7 8
1 2
1 5
2 3
2 6
3 4
4 7
5 6
6 4
*/
