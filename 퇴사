#include<iostream>
#include<vector>
using namespace std;
int maxpay = 0;
void normal(vector<pair<int,int>> v, int n ,int total_day,int max)
{  
	for (int i = total_day; i < v.size(); ++i)//인덱스를 총 소요기간부터 탐색하면 됨(ex:v[3]에는 4일째 상담이 들어있으므로)
	{
		total_day = i + v[i].first; //총 소요된 시간=이전까지 총 소요된 기간+탐색한 인덱스의 상담 기간 
		if (total_day < n + 1) //두 합이 n 이하이면 
		{
			max = max + v[i].second;//총 수익을 계산함 
			if (max > maxpay)//총 수익이 max보다 크면 새로 갱신
				maxpay = max;
			normal(v, n, total_day, max);//총 수익,총 소요된 기간을 보내줌
			max = max - v[i].second; //max 초기화
		}
		total_day = total_day - v[i].first; //total_day 초기화
	}
}
int main()
{
	int n;
	cin >> n;
	vector<pair<int, int>> v; //[day,pay]
	for (int i = 0; i < n; ++i) //벡터에는 1일(index=0)부터 n일(index=n-1)까지 [걸리는 상담 기간,비용]를 가지게 됨
	{
		int day, pay;
		cin >> day >> pay;
		v.push_back(make_pair(day, pay));
	}
	normal(v, n, 0, 0);
	cout << maxpay;
}
