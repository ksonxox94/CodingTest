#include<iostream>
#include<vector>
#include<queue>
using namespace std;
#define INF 1e9
struct node
{
	int index;
	int dist;
};
struct compare
{
	bool operator()(node a, node b)
	{
		return a.dist > b.dist;
	}
};
void wayFunction(vector<int> way, int start, int end) //재귀로 구성해 함수를 탈출하기 직전에 way[end]를 출력하면 순서대로 경로를 출력
{
	if (end != start)//end가 start와 같아지면 역추적(재귀) 종료
	{
		wayFunction(way, start, way[end]);
		cout << way[end] << "->";
	};
}
void dijkstra(vector<vector<pair<int, int>>> graph, vector<int> distance, int n, int start)
{
	priority_queue<node, vector<node>, compare> q;
	vector<int> way = vector<int>(n + 1, 0);

	q.push({ start,0 });
	distance[start] = 0;

	while (!q.empty())
	{
		int now = q.top().index;//가장 가까운 노드의 index와 거리를 뽑아서 현재 노드로 선택
		int dist = q.top().dist;
		q.pop();
		if (dist>distance[now])//만약 큐에서 뽑은 노드의 거리값이 distance 테이블의 거리값보다 더 큰 경우는 이전에 업데이트된 값이므로 패스함
			continue;
		for (auto n : graph[now]) //현재 노드부터 갈수있는 노드 탐색
		{
			int cost = dist + n.second;//현재 노드까지 거리+현재 노드부터 탐색한 노드까지 거리
			int next = n.first;
			if (cost < distance[next])//그 거리가 distance 테이블의 거리(시작노드부터 탐색한 노드까지의 거리)보다 작으면
			{
				distance[next] = cost;//최단거리값 갱신;
				q.push({ next , cost });//큐에 갱신된 노드의 {index,최단거리}을 삽입
				way[next] = now;//방문한 노드의 값으로 직전에 방문한 노드를 저장해서 경로 역추적 가능
			}
		}
	}
	for (int i = 1; i < n + 1; ++i)
	{
		cout << start << "부터 " << i << "까지 최단 거리:";
		if (distance[i] == INF)
			cout << "infinity\n";
		else
		{
			cout << distance[i] <<"\n";
			cout<<"최단 경로:";
			wayFunction(way, start, i);
			cout << i<< "\n";
		}
	}
}
int main()
{
	int n, m, start;
	cin >> n >> m >> start;
	vector<vector<pair<int, int>>> graph=vector<vector<pair<int,int>>>(n+1,vector<pair<int,int>>());
	//graph[index] : index 노드부터 갈 수 있는 {다음 노드 index,다음 노드까지 거리}를 저장하는 벡터
	vector<int> distance(n + 1, INF);
	//distance[index] : 시작노드부터  각 index 노드까지의 최단거리가 갱신되는 벡터

	for (int i = 0; i < m; ++i)
	{
		int from, to, dist;
		cin >> from >> to >> dist;
		graph[from].push_back(make_pair(to, dist));
	}

	dijkstra(graph, distance, n, start);
	
	return 0;
}


/*
##### 우선순위 큐를 이용한 다익스트라 알고리즘 ######
vector<node> graph[i]  :  i번 노드부터 갈 수 있는 노드의 {인덱스,거리}를 저장하는 벡터
vector<int> distance   :   시작 노드부터 i번 노드까지의 최단거리를 저장하는 벡터
priority_queue<node,vector<node>,compare> q   :   시작노드부터 i번 노드까지 최단거리값이 갱신될때마다 노드의 {인덱스,최단거리}를 넣음

1.distance 벡터의 모든 값들을 무한으로 초기화
2.시작 노드의 distance 테이블 값을 0으로 초기화
3.시작 노드를 큐에 넣음
-----------------큐가 빌 때까지 반복------------------
1.큐에서 가장 거리가 낮은 노드를 뽑고 now로 지정 후 pop (노드를 뽑으면 그 노드까지 최단 거리는 확정된 것)
2.now.dist가 distance[now]보다 더 크면 쓸모없기때문에 1번으로 돌아감
3.now 노드부터 갈 수 있는 노드들 탐색
4.now 노드까지 거리+now 노드부터 탐색한 노드까지 거리가 distance[탐색한 노드]보다 작으면
5.distance[탐색한 노드]=now 노드까지 거리+now 노드부터 탐색한 노드까지 거리로 갱신
6.큐에다가 탐색한 노드의 {index,갱신된 거리}를 넣음

4 5 1
1 2 2
1 3 8
1 4 6
2 3 1
2 4 1

<MAP>
l----l
l    l
1--2-3
l  l
l  4
---l

<INPUT SAMPLE>
6 11 1
1 2 2
1 3 5
1 4 1
2 3 3
2 4 2
3 2 3
3 6 5
4 3 3
4 5 1
5 3 1
5 6 2
*/
